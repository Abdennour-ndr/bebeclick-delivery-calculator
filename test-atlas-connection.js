/**
 * ุงุฎุชุจุงุฑ ุงุชุตุงู MongoDB Atlas ูุจุณุท
 */

import { MongoClient } from 'mongodb';
import dotenv from 'dotenv';

dotenv.config();

const testAtlasConnection = async () => {
  const uri = process.env.MONGODB_URI;
  
  console.log('๐ ุงุฎุชุจุงุฑ ุงุชุตุงู MongoDB Atlas...');
  console.log('๐ URI:', uri.replace(/\/\/.*@/, '//***:***@'));
  
  const client = new MongoClient(uri, {
    serverSelectionTimeoutMS: 10000, // 10 ุซูุงูู
    connectTimeoutMS: 10000,
    socketTimeoutMS: 10000,
  });

  try {
    console.log('โณ ูุญุงููุฉ ุงูุงุชุตุงู...');
    
    // ูุญุงููุฉ ุงูุงุชุตุงู
    await client.connect();
    console.log('โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ!');
    
    // ุงุฎุชุจุงุฑ ping
    const adminDb = client.db('admin');
    const pingResult = await adminDb.command({ ping: 1 });
    console.log('๐ Ping ูุฌุญ:', pingResult);
    
    // ุงูุญุตูู ุนูู ูุนูููุงุช ูุงุนุฏุฉ ุงูุจูุงูุงุช
    const db = client.db('bebeclick-delivery');
    const collections = await db.listCollections().toArray();
    console.log('๐ ูุงุนุฏุฉ ุงูุจูุงูุงุช: bebeclick-delivery');
    console.log('๐ ุงููุฌููุนุงุช ุงูููุฌูุฏุฉ:', collections.length);
    
    if (collections.length > 0) {
      console.log('๐ ุฃุณูุงุก ุงููุฌููุนุงุช:');
      collections.forEach(col => {
        console.log(`  - ${col.name}`);
      });
    } else {
      console.log('๐ญ ูุง ุชูุฌุฏ ูุฌููุนุงุช (ูุงุนุฏุฉ ุจูุงูุงุช ูุงุฑุบุฉ)');
    }
    
    // ุฅูุดุงุก ูุฌููุนุฉ ุงุฎุชุจุงุฑ
    console.log('\n๐งช ุฅูุดุงุก ูุฌููุนุฉ ุงุฎุชุจุงุฑ...');
    const testCollection = db.collection('test');
    
    // ุฅุฏุฑุงุฌ ูุซููุฉ ุงุฎุชุจุงุฑ
    const testDoc = {
      message: 'ุงุฎุชุจุงุฑ ุงุชุตุงู BebeClick',
      timestamp: new Date(),
      source: 'test-atlas-connection'
    };
    
    const insertResult = await testCollection.insertOne(testDoc);
    console.log('โ ุชู ุฅุฏุฑุงุฌ ูุซููุฉ ุงุฎุชุจุงุฑ:', insertResult.insertedId);
    
    // ูุฑุงุกุฉ ุงููุซููุฉ
    const foundDoc = await testCollection.findOne({ _id: insertResult.insertedId });
    console.log('โ ุชู ูุฑุงุกุฉ ุงููุซููุฉ:', foundDoc.message);
    
    // ุญุฐู ุงููุซููุฉ
    await testCollection.deleteOne({ _id: insertResult.insertedId });
    console.log('โ ุชู ุญุฐู ูุซููุฉ ุงูุงุฎุชุจุงุฑ');
    
    console.log('\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! ูุงุนุฏุฉ ุงูุจูุงูุงุช ุชุนูู ุจุดูู ูุซุงูู');
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุชุตุงู:', error.message);
    
    if (error.message.includes('IP')) {
      console.log('\n๐ก ูุตุงุฆุญ ูุญู ุงููุดููุฉ:');
      console.log('1. ุชุฃูุฏ ูู ุฅุถุงูุฉ 0.0.0.0/0 ูู Network Access');
      console.log('2. ุงูุชุธุฑ 2-3 ุฏูุงุฆู ูุชูุนูู ุงูุชุบููุฑุงุช');
      console.log('3. ุชุฃูุฏ ูู ุตุญุฉ ุงุณู ุงููุณุชุฎุฏู ููููุฉ ุงููุฑูุฑ');
    }
    
    if (error.message.includes('authentication')) {
      console.log('\n๐ ูุดููุฉ ูู ุงููุตุงุฏูุฉ:');
      console.log('1. ุชุญูู ูู ุงุณู ุงููุณุชุฎุฏู: inncomm16');
      console.log('2. ุชุญูู ูู ูููุฉ ุงููุฑูุฑ ูู ููู .env');
      console.log('3. ุชุฃูุฏ ูู ุตูุงุญูุงุช ุงููุณุชุฎุฏู ูู MongoDB Atlas');
    }
    
  } finally {
    await client.close();
    console.log('๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู');
  }
};

testAtlasConnection();
