/**
 * ุชุดุฎูุต ููุตู ููุดููุฉ MongoDB Atlas
 */

import { MongoClient } from 'mongodb';
import dotenv from 'dotenv';
import dns from 'dns';
import { promisify } from 'util';

dotenv.config();

const lookup = promisify(dns.lookup);

const debugAtlasConnection = async () => {
  console.log('๐ ุชุดุฎูุต ููุตู ูู MongoDB Atlas...');
  console.log('=' .repeat(50));
  
  // 1. ุงูุชุญูู ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
  console.log('\n๐ 1. ูุญุต ูุชุบูุฑุงุช ุงูุจูุฆุฉ:');
  const uri = process.env.MONGODB_URI;
  
  if (!uri) {
    console.log('โ MONGODB_URI ุบูุฑ ููุฌูุฏ ูู ููู .env');
    return;
  }
  
  console.log('โ MONGODB_URI ููุฌูุฏ');
  
  // ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุงุชุตุงู
  const uriParts = uri.match(/mongodb\+srv:\/\/([^:]+):([^@]+)@([^\/]+)\/(.+)/);
  if (uriParts) {
    console.log(`๐ ุงููุณุชุฎุฏู: ${uriParts[1]}`);
    console.log(`๐ ูููุฉ ุงููุฑูุฑ: ${uriParts[2].substring(0, 4)}***`);
    console.log(`๐ ุงูุฎุงุฏู: ${uriParts[3]}`);
    console.log(`๐พ ูุงุนุฏุฉ ุงูุจูุงูุงุช: ${uriParts[4].split('?')[0]}`);
  }
  
  // 2. ุงุฎุชุจุงุฑ DNS
  console.log('\n๐ 2. ุงุฎุชุจุงุฑ DNS:');
  try {
    const hostname = 'bebeclickdb.n55xdah.mongodb.net';
    const address = await lookup(hostname);
    console.log(`โ DNS ูุนูู: ${hostname} -> ${address.address}`);
  } catch (error) {
    console.log(`โ ูุดููุฉ DNS: ${error.message}`);
    return;
  }
  
  // 3. ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ูุน timeout ูุตูุฑ
  console.log('\n๐ 3. ุงุฎุชุจุงุฑ ุงูุงุชุตุงู:');
  
  const client = new MongoClient(uri, {
    serverSelectionTimeoutMS: 5000,
    connectTimeoutMS: 5000,
    socketTimeoutMS: 5000,
    maxPoolSize: 1,
    retryWrites: false,
    retryReads: false
  });

  try {
    console.log('โณ ูุญุงููุฉ ุงูุงุชุตุงู (5 ุซูุงูู)...');
    
    await client.connect();
    console.log('โ ูุฌุญ ุงูุงุชุตุงู!');
    
    // ุงุฎุชุจุงุฑ ุงููุตุงุฏูุฉ
    console.log('\n๐ 4. ุงุฎุชุจุงุฑ ุงููุตุงุฏูุฉ:');
    const adminDb = client.db('admin');
    await adminDb.command({ ping: 1 });
    console.log('โ ุงููุตุงุฏูุฉ ูุฌุญุช!');
    
    // ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
    console.log('\n๐พ 5. ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
    const db = client.db('bebeclick-delivery');
    const collections = await db.listCollections().toArray();
    console.log(`โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุชุงุญุฉุ ุงููุฌููุนุงุช: ${collections.length}`);
    
    // ุงุฎุชุจุงุฑ ุงููุชุงุจุฉ
    console.log('\nโ๏ธ 6. ุงุฎุชุจุงุฑ ุงููุชุงุจุฉ:');
    const testCollection = db.collection('connection_test');
    const result = await testCollection.insertOne({
      test: 'connection_test',
      timestamp: new Date(),
      ip: 'unknown'
    });
    console.log(`โ ุงููุชุงุจุฉ ูุฌุญุช: ${result.insertedId}`);
    
    // ุชูุธูู
    await testCollection.deleteOne({ _id: result.insertedId });
    console.log('โ ุชู ุชูุธูู ุงูุจูุงูุงุช ุงูุชุฌุฑูุจูุฉ');
    
    console.log('\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! MongoDB Atlas ูุนูู ุจุดูู ูุซุงูู');
    
  } catch (error) {
    console.log(`โ ูุดู ุงูุงุชุตุงู: ${error.message}`);
    
    // ุชุดุฎูุต ููุน ุงูุฎุทุฃ
    console.log('\n๐ ุชุดุฎูุต ุงูุฎุทุฃ:');
    
    if (error.message.includes('authentication')) {
      console.log('๐ ูุดููุฉ ูุตุงุฏูุฉ:');
      console.log('  - ุชุญูู ูู ุงุณู ุงููุณุชุฎุฏู ููููุฉ ุงููุฑูุฑ');
      console.log('  - ุชุฃูุฏ ูู ูุฌูุฏ ุงููุณุชุฎุฏู ูู Database Access');
      console.log('  - ุชุญูู ูู ุตูุงุญูุงุช ุงููุณุชุฎุฏู');
    }
    
    if (error.message.includes('timeout') || error.message.includes('selection')) {
      console.log('โฐ ูุดููุฉ ุดุจูุฉ/timeout:');
      console.log('  - ุชุญูู ูู Network Access (0.0.0.0/0)');
      console.log('  - ุชุฃูุฏ ูู ุฃู ุงูู Cluster ูุนูู');
      console.log('  - ูุฏ ุชููู ูุดููุฉ ูู ุฌุฏุงุฑ ุงูุญูุงูุฉ ุงููุญูู');
    }
    
    if (error.message.includes('ENOTFOUND')) {
      console.log('๐ ูุดููุฉ DNS:');
      console.log('  - ุชุญูู ูู ุงุชุตุงู ุงูุฅูุชุฑูุช');
      console.log('  - ูุฏ ุชููู ูุดููุฉ ูู DNS ุงููุญูู');
    }
    
    // ุงูุชุฑุงุญุงุช ุงูุญู
    console.log('\n๐ก ุงูุชุฑุงุญุงุช ุงูุญู:');
    console.log('1. ุงูุชุธุฑ 5-10 ุฏูุงุฆู ุจุนุฏ ุชุบููุฑ ุฅุนุฏุงุฏุงุช Atlas');
    console.log('2. ุชุฃูุฏ ูู ุฃู ุงูู Cluster ููุณ ูุชููู (paused)');
    console.log('3. ุฌุฑุจ ุฅูุดุงุก ูุณุชุฎุฏู ุฌุฏูุฏ ุจุตูุงุญูุงุช Atlas Admin');
    console.log('4. ุชุญูู ูู ุฅุนุฏุงุฏุงุช ุฌุฏุงุฑ ุงูุญูุงูุฉ ุงููุญูู');
    console.log('5. ุฌุฑุจ ูู ุดุจูุฉ ูุฎุชููุฉ (mobile hotspot)');
    
  } finally {
    await client.close();
    console.log('\n๐ ุชู ุฅุบูุงู ุงูุงุชุตุงู');
  }
};

debugAtlasConnection();
